#import "libc.kai"

HasPrefix :: fn(str, prefix: string) -> bool {
    if prefix.len > str.len
        return false

    for c, i in prefix {
        if c != str[i]
            return false
    }

    return true
}

Equal :: fn(lhs, rhs: string) -> bool {
    if lhs.len != rhs.len
        return false

    for c, i in lhs {
        if c != rhs[i]
            return false
    }

    return true
}

IsAlpha :: fn(cp: u8) -> bool {
    return (cp >= "a" && cp <= "z") || (cp >= "A" && cp <= "Z")
}

IsNumeric :: fn(cp: u8) -> bool {
    return cp >= "0" && cp <= "9"
}

Split :: fn(str: string, delim: u8, results: *[]string) -> u64 {
    if !results || results.cap == 0 { return 0 }

    start := 0
    index := 0
    for i := 0; i < str.len; i += 1 {
        if str[i] == delim {
            (<results)[index] = str[start:i]
            index += 1
            start = i+1
            if index >= results.cap {
                break
            }
        }
    }

    if index < results.cap && str[str.len] != delim {
        (<results)[index] = str[start:str.len]
        index += 1
    }

    results.len = index
    return index
}

#test "Can split string" {
    buffer: [10]string
    slice := buffer[:]
    count := Split("a.test.case", ".", &slice)

    assert(count == 3)
    assert(slice.len == 3)
    assert(Equal(buffer[0], "a"))
    assert(Equal(buffer[1], "test"))
    assert(Equal(buffer[2], "case"))
}
