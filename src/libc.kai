#library "libc"

File :: rawptr

Stat :: struct {
    device_id:     i32  // ID of device containing file
    mode:          u16  // Mode of the file
    nlink:         u16  // Number of hard links
    serial:        u32  // File serial number
    uid:           u32  // User ID of the file's owner
    gid:           u32  // Group ID of the file's group
    rdev:          i32  // Device ID, if device

    last_access:      u64  // Time of last access
    last_access_ns:   u64  // Time of last access
    modified:         u64  // Time of last modification
    modified_ns:      u64  // Time of last modification
    status_change:    u64  // Time of last status change
    status_change_ns: u64  // Time of last status change

    size:          u64  // Size of the file, in bytes
    blocks:        i64  // Number of blocks allocated for the file
    block_size:    i32  // Optimal blocksize for I/O
    flags:         u32  // User-defined flags for the file
    gen_num:       u32  // File generation number ...?
    _spare:        i32  // RESERVED
    _reserve1,
    _reserve2:     i64  // RESERVED
}

Timespec :: struct {
    tv_sec, tv_nsec: u64
}

CLOCK_PROCESS_CPUTIME_ID :: 12

OpenOptions :: enum(u32) {
    RDONLY    :: 0x0000 /* open for reading only */
    WRONLY    :: 0x0001 /* open for writing only */
    RDWR      :: 0x0002 /* open for reading and writing */
    ACCMODE   :: 0x0003 /* mask for above modes */
    NONBLOCK  :: 0x0004 /* no delay */
    SYNC      :: 0x0080 /* synch I/O file integrity */
    DSYNC     :: 0x400000 /* synch I/O data integrity */
    APPEND    :: 0x0008 /* set append mode */
    NOFOLLOW  :: 0x0100 /* don't follow symlinks */
    CREAT     :: 0x0200 /* create if nonexistant */
    TRUNC     :: 0x0400 /* truncate to zero length */
    EXCL      :: 0x0800 /* error if already exists */
    DIRECTORY :: 0x100000 /* Fail if file is non-directory file */
    NOCTTY    :: 0x20000 /* don't assign controlling terminal */
    CLOEXEC   :: 0x1000000 /* implicitly set FD_CLOEXEC */
}

// File mode
// Read, write, execute/search by owner
FileMode :: enum(u32) {
    IRWXU :: 0000700 // RWX mask for owner
    IRUSR :: 0000400 // R for owner
    IWUSR :: 0000200 // W for owner
    IXUSR :: 0000100 // X for owner
}

Prot :: enum(u32) {
    NONE  :: 0x00
    READ  :: 0x01
    WRITE :: 0x02
    EXEC  :: 0x04
}

Map :: enum(u32) {
    FILE    :: 0x0000
    SHARED  :: 0x0001
    PRIVATE :: 0x0002
    ANON    :: 0x1000
}

MAP_FAILED :: -1

#foreign libc #callconv "c" {
    malloc  :: (size: u64) -> rawptr
    realloc :: (ptr: rawptr, size: u64) -> rawptr
    memcpy  :: (dst, src: rawptr, size: u64) -> rawptr
    free    :: (ptr: rawptr) -> void
    open    :: (path: *u8, flags: i32, modes: #cvargs ..any) -> i32
    close   :: (fd: i32) -> i32
    write   :: (fd: i32, buf: rawptr, size: u64) -> i64
    fopen   :: (path: *u8, args: *u8) -> File
    fclose  :: (stream: File) -> i32
    fwrite  :: (ptr: rawptr, size, nmemb: u64, file: File) -> u64
    fstat   :: (fd: i32, buf: *Stat) -> i32
    mmap    :: (addr: rawptr, len: u64, prot: i32, flags: i32, fd: i32, offset: u64) -> rawptr
    printf  :: (format: *u8, args: #cvargs ..any) -> i32
    strlen  :: (str: *u8) -> u64

    sleep   :: (seconds: u32) -> void

    clock_getres  :: (id: i32, res: *Timespec) -> i32
    clock_gettime :: (id: i32, tp: *Timespec) -> i32

    errno: i32
}

