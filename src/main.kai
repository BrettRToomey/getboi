#import "net.kai"
#import "mem.kai"
#import "curses.kai"
#import "json.kai"
#import "boiscript.kai"

ComponentColor :: enum(u16) {
    Default :: 1
    Get
    Tabbar
    Tab
    LineNum
}

Color :: enum {
    Black    :: 0
    Red      :: 1
    Green    :: 2
    Yellow   :: 3
    Blue     :: 4
    Magenta  :: 5
    Cyan     :: 6
    White    :: 7
    DarkGrey :: 8
    Reverse  :: 255
}

Mode :: enum {
    Normal
    UrlInput
    Search
    Collections
    Endpoints
}

TabbarWidth  :: 0
TabbarHeight :: 1

HeaderWidth  :: 0
HeaderHeight :: 3
HeaderOffset :: TabbarHeight

MethodWidth  :: 5
MethodHeight :: 1

URL :: "https://jsonplaceholder.typicode.com/users"

EnableComponentColor :: fn(win: rawptr, color: ComponentColor) -> void {
    using curses
    colorPair := COLOR_PAIR(color)
    wattron(win, colorPair)
}

DisableComponentColor :: fn(win: rawptr, color: ComponentColor) -> void {
    using curses
    colorPair := COLOR_PAIR(color)
    wattroff(win, colorPair)
}

FillLine :: fn(win: rawptr, color: ComponentColor, width: i32) -> void {
    EnableComponentColor(win, color)
    defer DisableComponentColor(win, color)
    for i := 0; i < width; i += 1 {
        curses.mvwprintw(win, 0, i, " ".raw)
    }
}

FillLineOffset :: fn(win: rawptr, color: ComponentColor, width, offset: i32) -> void {
    EnableComponentColor(win, color)
    defer DisableComponentColor(win, color)
    for i := 0; i < width; i += 1 {
        curses.mvwprintw(win, 0, i+offset, " ".raw)
    }
}

State :: struct {
    hnd: rawptr
    height,
    width: i32
    mode: Mode
    running,
    hasResponse: bool
    response: Response
}

Response :: struct {
    data: *[]u8
    contentType: string
    time: f64
    status: i64
}

Input :: struct {
    key: i32
    mouseX,
    mouseY: i32
    mouseClicked: bool
}

Windows :: struct {
    main,
    header,
    url,
    tabbar,
    body,
    bodyToggle: rawptr
}

RelayoutWindows :: fn(windows: *Windows, width, height: i32) -> void {
    using curses
    wresize(windows.main, height, width)
    wresize(windows.header, HeaderHeight, width)
    wresize(windows.url, 1, width-10)
    wresize(windows.tabbar, TabbarHeight, width)
    wresize(windows.body, height-6, width-3)
    wresize(windows.bodyToggle, 1, width)
}

PrintUrl :: fn(windows: *Windows, url: string) -> void {
    curses.mvwprintw(windows.url, 0, 1, "%s".raw, url.raw)
}

PrintResponseTab :: fn(windows: *Windows, state: *State) -> void {
    FillLineOffset(windows.bodyToggle, ComponentColor.Tab, state.width/2+1, state.width/2)

    EnableComponentColor(windows.bodyToggle, ComponentColor.Tab)
    defer DisableComponentColor(windows.bodyToggle, ComponentColor.Tab)

    if state.hasResponse {
        contentType := state.response.contentType
        time := cast(i32)(state.response.time*1000)
        status := state.response.status

        curses.mvwprintw(
            windows.bodyToggle,
            0, 
            (state.width/2)+1, 
            "Response (%s, %dms, status: %d)".raw,
            contentType.raw, 
            time,
            status)
    } else {
        curses.mvwprintw(windows.bodyToggle, 0, (state.width/2)+1, "Response".raw)
    }
}

RefreshAll :: fn(windows: *Windows) -> void {
    using curses
    touchwin(windows.main)
    touchwin(windows.header)
    wrefresh(windows.url)
    wrefresh(windows.header)
    wrefresh(windows.tabbar)
    wrefresh(windows.bodyToggle)
    wrefresh(windows.body)
    wrefresh(windows.main)
}

TickNormalMode :: fn(state: *State, windows: *Windows, input: *Input) -> void {
    using curses
    switch input.key {
    case "q":
        state.running = false
    case KEY_MOUSE:
        if input.mouseClicked {
            wprintw(windows.body, "%d, %d\n".raw, input.mouseX, input.mouseY)
            wrefresh(windows.body)
        }
    case KEY_ENTER:
        state.response.data.len = 0
        assert(state.response.data != nil)
        net.MakeRequest(state.hnd, net.Method.Get, URL, state.response.data)
        code, status, time := net.Send(state.hnd)
        if net.OK(code) {
            curs_set(TRUE)
            wmove(windows.main, 5, 3)
            wprintw(windows.body, "%.*s\n".raw, state.response.data.len, state.response.data.raw)
        } else {
            wprintw(windows.body, "%s\n".raw, net.ErrorToString(code).raw)
        }

        state.hasResponse = true
        state.response.contentType = "json"
        state.response.time = time
        state.response.status = status
        PrintResponseTab(windows, state)

        touchwin(windows.main)
        wrefresh(windows.body)
        wrefresh(windows.bodyToggle)
    }
}

main :: fn() -> i32 {
    hnd := net.InitCurl()
    if !hnd {
        return 1
    }

    buffSize :: 1024 * 1024 * 4

    data: []u8
    mem.ArrayInit(mem.DefaultAllocatorInit(), &data, buffSize)

    // TODO(Brett): remove UI code from here and this using stmt
    using curses

    initscr()
    noecho()
    cbreak()

    mouseFlags :: BUTTON1_PRESSED | BUTTON1_CLICKED
    mousemask(mouseFlags, nil)

    hasComponentColor := has_colors() != FALSE
    if !hasComponentColor {
        return 1
    }

    use_default_colors()
    start_color()
    init_pair(ComponentColor.Get,     Color.White, Color.Green)
    init_pair(ComponentColor.Tabbar,  Color.White, Color.DarkGrey)
    init_pair(ComponentColor.Tab,     Color.Black, Color.Cyan)
    init_pair(ComponentColor.LineNum, Color.DarkGrey, -1)

    h, w := getmaxyx(stdscr)

    win := newwin(0, 0, 0, 0)
    keypad(win, TRUE)

    tabbar := subwin(win, TabbarHeight, TabbarWidth, 0, 0)
    header := subwin(win, HeaderHeight, HeaderWidth, HeaderOffset, 0)
    sub := derwin(header, 1, 9, 1, 1)
    url := derwin(header, 1, w-10, 1, 10)
    
    toggle := subwin(win, 1, 0, HeaderOffset+HeaderHeight, 0)
    content := derwin(win, h-6, 0, 5, 3)

    scrollok(content, TRUE)
    
    box(header, 0, 0)

    FillLine(tabbar, ComponentColor.Tabbar, w)
    FillLine(toggle, ComponentColor.Tabbar, w/2)
    // NOTE: the plus one is to properly size on odd screen widths
    FillLineOffset(toggle, ComponentColor.Tab, w/2+1, w/2)

    EnableComponentColor(tabbar, ComponentColor.Tab)
    mvwprintw(tabbar, 0, 0, " An example request ".raw)
    DisableComponentColor(tabbar, ComponentColor.Tab)

    EnableComponentColor(sub, ComponentColor.Get)
    mvwprintw(sub, 0, 0, "   GET   ".raw)
    DisableComponentColor(sub, ComponentColor.Get)

    EnableComponentColor(toggle, ComponentColor.Tabbar)
    mvwprintw(toggle, 0, 1, "Request".raw)
    DisableComponentColor(toggle, ComponentColor.Tab)

    EnableComponentColor(toggle, ComponentColor.Tab)
    mvwprintw(toggle, 0, (w/2)+1, "Response".raw)
    DisableComponentColor(toggle, ComponentColor.Tab)

    EnableComponentColor(win, ComponentColor.LineNum)
    for i := 0; i < (h-6); i += 1 {
        mvwprintw(win, i+5, 0, "%*d".raw, 2, i+1)
    }
    DisableComponentColor(win, ComponentColor.LineNum)

    curs_set(FALSE)

    _state := State { 
        hnd: hnd,
        width: w,
        height: h,
        mode: Mode.Normal,
        running: true,
        hasResponse: false
    }
    state := &_state
    state.response.data = &data

    _windows := Windows {
        main: win,
        header: header,
        url: url,
        tabbar: tabbar,
        body: content,
        bodyToggle: toggle
    }
    windows := &_windows

    _input: Input
    input := &_input

    PrintUrl(windows, URL)

    for state.running {
        key := curses.wgetch(win)
        input.key = key
        input.mouseClicked = false

        if key == curses.KEY_MOUSE {
            event: curses.MEVENT
            if curses.getmouse(&event) == curses.OK {
                input.mouseClicked = event.bstate & mouseFlags > 0
                input.mouseX, input.mouseY = event.x, event.y
            }
        } else if key == curses.KEY_RESIZE {
            state.height, state.width = getmaxyx(stdscr)
            RelayoutWindows(windows, state.width, state.height)
            PrintUrl(windows, URL)
            FillLine(windows.tabbar, ComponentColor.Tabbar, state.width)
            FillLine(windows.bodyToggle, ComponentColor.Tabbar, state.width/2)
            PrintResponseTab(windows, state)
            RefreshAll(windows)
            continue
        }

        switch using state.mode {
        case Normal: TickNormalMode(state, windows, input)
        case: /* unhandled */ state.running = false
        }
    }
    
    endwin()
    return 0
}

